if (!file.exists("data")){
dir.create("data")
}
list.files("./data")
list.files("./data")
dateDownloaded <- date()
dateDownloaded
fileurl <- "https://www.stats.govt.nz/assets/Uploads/Annual-enterprise-survey/Annual-enterprise-survey-2020-financial-year-provisional/Download-data/annual-enterprise-survey-2020-financial-year-provisional-csv.csv"
destfile <- "./data/test.csv"
download.file(fileurl,destfile)
mydata <- read.table("./data/test.csv", sep= ",", header =TRUE)
head(mydata)
data1 <- fread("./data/test.csv")
data1 <- data.table::fread("./data/test.csv")
head(data1)
data1
install.packages("xlsx")
library('xlsx')
library(""xlsx)
library("xlsx")
library(xlsx)
install.packages("readxl")
library(readxl)
data1 <- read_xlsx("./data/Item_Prefix.xlsx")
data1 <- read_xlsx("C:\\Users\\Zahid Butt\\Documents\\MyData_Collection\\data\\Item_Prefix.xlsx")
head(data1)
data1 <- read_xlsx(".\data\item_Prefix.xlsx")
data1 <- read_xlsx("./data/item_Prefix.xlsx")
getwd()
data1 <- read_xlsx("./data/item_Prefix.xlsx")
setwd("C:\\Users\\Zahid Butt\\Documents\\MyData_Collection\\data")
getwd()
data1 <- read_xlsx("item_Prefix.xlsx")
data2 <- read_xlsx("item_Prefix.xlsx")
data2 <- read_xlsx("\item_Prefix.xlsx")
data2 <- read_xlsx("\\item_Prefix.xlsx")
data1 <- read_xlsx("C:\\Users\\Zahid Butt\\Documents\\MyData_Collection\\data\\Item_Prefix.xlsx")
data1 <- read_xlsx("C:\\Users\\Zahid Butt\\Documents\\MyData_Collection\\data\\Item_Prefix.xlsx",sheet = 1, header = TRUE)
data1 <- read_xlsx("C:\\Users\\Zahid Butt\\Documents\\MyData_Collection\\data\\Item_Prefix.xlsx",sheet = 1, head = TRUE)
data1 <- read_xlsx("C:\\Users\\Zahid Butt\\Documents\\MyData_Collection\\data\\Item_Prefix.xlsx",sheetindex  = `, Headerr= TRUE)
head(data1)
data1 <- read_xlsx("C:\\Users\\Zahid Butt\\Documents\\MyData_Collection\\data\\Item_Prefix.xlsx",sheetindex  = `, Header= TRUE)
head(data1)
data1 <- read_xlsx("C:\\Users\\Zahid Butt\\Documents\\MyData_Collection\\data\\abc.xlsx",sheetindex  = `, Header= TRUE)
head(data1)
data1 <- read_xlsx("C:\\Users\\Zahid Butt\\Documents\\MyData_Collection\\data\\abc.xlsx",sheetindex  = 1`, Header= TRUE)
head(data1)
data1 <- read_xlsx("C:\\Users\\Zahid Butt\\Documents\\MyData_Collection\\data\\abc.xlsx")
head(data1)
readxl_example()
view(data1)
View(data1)
head(data1)
for (pkg in pkgs){
if (!require(pkg, character.only = T)){
install.packages(pkg)
library(pkg)
}
}
pkgs = c("rvest", "magrittr", "httr", "stringr")
#------------------------------------------------
install.packages("rvest")
## First, load required packages (or install if they're not already)
pkgs = c("rvest", "magrittr", "httr", "stringr")
for (pkg in pkgs){
if (!require(pkg, character.only = T)){
install.packages(pkg)
library(pkg)
}
}
## Read my example html with read_html()
silly_webpage = read_html("http://stanford.edu/~wpmarble/webscraping_tutorial/html/silly_webpage.html")
# get paragraphs (css selector "p")
my_paragraphs = html_nodes(silly_webpage, "p")
## Read my example html with read_html()
silly_webpage = read_html("http://stanford.edu/~wpmarble/webscraping_tutorial/html/silly_webpage.html")
# get paragraphs (css selector "p")
my_paragraphs = html_nodes(silly_webpage, "p")
my_paragraphs
popParse <- read_html("https://en.wikipedia.org/wiki/List_of_countries_by_population_in_1900")
str(popParse)
popNodes <- html_nodes(popParse, "table")
popNodes
View(popNodes)
pop <- html_table(popNodes, header = TRUE, fill = TRUE)[[3]]
str(pop)
pop2 <- pop[-1, ]         #remove row 1
head(pop2)
popParse <- read_html("https://en.wikipedia.org/wiki/List_of_countries_by_population_in_1900")
str(popParse)
popNodes <- html_nodes(popParse, "table")
popNodes
pop <- html_table(popNodes, header = TRUE, fill = TRUE)[[3]]
str(pop)
pop2 <- pop[-1, ]         #remove row 1
head(pop2)
library(rvest)
# Start by reading a HTML page with read_html():
starwars <- read_html("https://rvest.tidyverse.org/articles/starwars.html")
# Then find elements that match a css selector or XPath expression
# using html_elements(). In this example, each <section> corresponds
# to a different film
films <- starwars %>% html_elements("section")
films
title <- films %>%
html_element("h2") %>%
html_text2()
title <- films %>%
html_element("h2") %>%
html_text2()
title <- films %>%
html_element("h2") %>%
html_text2()
title
# Or use html_attr() to get data out of attributes. html_attr() always
# returns a string so we convert it to an integer using a readr function
episode <- films %>%
html_element("h2") %>%
html_attr("data-id") %>%
readr::parse_integer()
episode <- films %>%
html_element("h2") %>%
html_attr("data-id") %>%
readr::parse_integer()
episode
episode <- films %>%
html_element("h2") %>%
html_attr("data-id") %>%
readr::parse_integer()
episode
episode <- films %>%
html_element("h2") %>%
html_attr("data-id") %>%
readr::parse_integer()
episode
# Load the RSQLite Library
library(RSQLite)
# Load the mtcars as an R data frame put the row names as a column, and print the header.
data("mtcars")
mtcars$car_names <- rownames(mtcars)
rownames(mtcars) <- c()
head(mtcars)
getwd()
# Create a connection to our new database, CarsDB.db
# you can check that the .db file has been created on your working directory
setwd('./data')
# Create or connect to database
conn <- dbConnect(RSQLite::SQLite(), "CarsDB.db") # correct path to DB
# Write the mtcars dataset into a table names mtcars_data
dbWriteTable(conn, "cars_data", mtcars)
# List all the tables available in the database
dbListTables(conn)
# Quick access functions
dbListFields(conn, "cars_data")
rdd <- dbReadTable(conn, "cars_data")
dbGetQuery(conn,"SELECT * FROM cars_data LIMIT 5 ")
# Get the car names and horsepower starting with M that have 6 or 8 cylinders
dbGetQuery(conn,"SELECT car_names, hp, cyl FROM cars_data
WHERE car_names LIKE 'M%' AND cyl IN (6,8)")
# Get the average horsepower and mpg by number of cylinder groups
dbGetQuery(conn,"SELECT cyl, AVG(hp) AS 'average_hp', AVG(mpg) AS 'average_mpg' FROM cars_data
GROUP BY cyl
ORDER BY average_hp")
avg_HpCyl <- dbGetQuery(conn,"SELECT cyl, AVG(hp) AS 'average_hp'FROM cars_data
GROUP BY cyl
ORDER BY average_hp")
avg_HpCyl
class(avg_HpCyl)
### User is looking for cars that have over 18 miles per gallon (mpg)
# and more than 6 cylinders
mpg <-  18
cyl <- 4
Result <- dbGetQuery(conn, 'SELECT car_names, mpg, cyl FROM cars_data WHERE mpg >= ? AND cyl >= ?',
params = c(mpg,cyl))
Result
# Visualize the table before deletion
dbGetQuery(conn, "SELECT * FROM cars_data LIMIT 10")
# Delete the column belonging to the Mazda RX4. You will see a 1 as the output.
dbExecute(conn, "DELETE FROM cars_data WHERE car_names = 'Mazda RX4'")
# Visualize the new table after deletion
dbGetQuery(conn, "SELECT * FROM cars_data LIMIT 10")
# Insert the data for the Mazda RX4. This will also ouput a 1
dbExecute(conn, "INSERT INTO cars_data VALUES (21.0,6,160.0,110,3.90,2.620,16.46,0,1,4,4,'Mazda RX4')")
# See that we re-introduced the Mazda RX4 succesfully at the end
dbGetQuery(conn, "SELECT * FROM cars_data")
# You can fetch all results:
res <- dbSendQuery(conn, "SELECT * FROM cars_data WHERE cyl = 6")
dbFetch(res)
# Clear the result
dbClearResult(res)
# Or a chunk at a time
res <- dbSendQuery(conn, "SELECT * FROM cars_data WHERE cyl = 8")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 5)
print(nrow(chunk))
}
# Clear the result
dbClearResult(res)
# Disconnect from the database
dbDisconnect(conn)
library('RMySQL')
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb)
result
table()
?data.matrix
set.seed(13435)
x<-data.frame("var1"=sample(1:5),"var2"=sampel(6:10),"var3"=sample(11:15))
x<-data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
x<- x[sample(1:5),]; x$var2[e(1,3)== NA
x
x<- x[sample(1:5),]
x$var2[e(1,3)= NA
x$var2[c(1,3)= NA
x$var2[c(1,3)]= NA
x
x[,1]
x[,2]
x[,3]
x[,"var1"]
x[,"var2"]
x[,"var3"]
x[1:3."var1"]
x[1:3,"var1"]
x[1,3,"var1"]
x[,"var1"]
x[,"var2"]
x[x$var1 <= 4 & x$var2<=9,]
x[x$var1 <= 4 & x$var3<=9,]
x[x$var1 <= 4 & x$var3<=9,]
x[x$var1 <= 4 & x$var3 <= 9 ,]
x[x$var1 <= 4 & x$var3 >= 9 ,]
x[x$var1 <= 2 & x$var3 >= 9 ,]
x[x$var1 <= 2 | x$var3 >= 9 ,]
x[x$var1 <= 2 | x$var3 >= 14 ,]
x[x$var1 <= 2 & x$var3 >= 14 ,]
x[x$var1 <= 2 | x$var3 >= 14 ,]
sort(x$var1)
soft(x$var3,decreading=TRUE)
soft(x$var3,decreasing=TRUE)
soft(x$var3,decreasing=TRUE)
sort(x$var3,decreasing=TRUE)
order(x$var1,x$var3)
x(order(x$var1,))
x[order(x$var1,)]
x[order(x$var1),]
x[order(x$var1),order(x$var3)]
x[order(x$var1,x$var3),]
x<-c(1:4,NA,6:7,NA)
is.na()
is.na(x)
df <- data.frame(col1=c(1:3,NA), col2= c("this",NA,"is", "text"),
is.na(df)
)
df <- data.frame(col1=c(1:3,NA), col2= c("this",NA,"is", "text"),
col3=c(TRUE,FALSE, TRUE,TRUE),col4=c(2.5,4.2,3.2),NA,stringsAsFactors=FALSE)
df <- data.frame(col1=c(1:3,NA), col2= c("this",NA,"is", "text"),
col3=c(TRUE,FALSE, TRUE,TRUE),col4=c(2.5,4.2,3.2,NA),stringsAsFactors=FALSE)
is.na(df)
sum(is.na(df))
which(is.na(df))
colsum(is.na(df))
colSums(is.na(df))
colSums(is.na(df))
View(df)
x<-c(1:4,NA,6:7,NA)
x(is.na(x)) <- mean(x,na.rm=TRUE)
x[is.na(x)] <- mean(x,na.rm=TRUE)
x
round(x,2)
df<-data.frame(col1=c(1:3,99), col2=c(2.5,4.2,99,3.2))
df
df[df==99]<-NA
df
complete.cases(df)
df[complete.cases(df),]
na.omit(df)
airquality
activity <- data.frame(opid= c("op01","op02","op03","op04","op05","op06","op07"),
units=c(24,43,21,32,13,12,32))
activity
names <- data.frame(operator=c("Larry","Curly", "Moe", "Jack","Jill", "Kim","Perry"))
blended = cbind(activity, names)
blended
blendr = rbind(activity,names)
blended = rbind(activity,names)
activity <- data.frame(opid= c("op01","op02","op03","op04","op05","op06","op07"))
names <- data.frame(operator=c("Larry","Curly", "Moe", "Jack","Jill", "Kim","Perry"))
blended = rbind(activity,names)
activity <- data.frame(opid= c("op01","op02","op03","op04","op05","op06","op07"),
units=c(24,43,21,32,13,12,32))
names <- data.frame(operator=c("Larry","Curly", "Moe", "Jack","Jill", "Kim","Perry"))
blended = cbind(activity, names)
rblended = rbind(blended,blended)
rblended
activity <- data.frame(operator= c("op01","op02","op03","op04","op05","op06","op07"))
names <- data.frame(operator=c("Larry","Curly", "Moe", "Jack","Jill", "Kim","Perry"))
blended = rbind(activity,names)
blended
df1 <- data.frame(LETTERS, dfindex= 1:26)
df1
df2 <- data.frame(letters, dfindex = c(1:10, 15,20,22:35))
df2
merge(df1,df2)
View(merge(df1,df2))
merge(df1,df2,all)
merge(df1,df2,all)
df1 <- data.frame(LETTERS, dfindex= 1:26)
df2 <- data.frame(letters, dfindex = c(1:10, 15,20,22:35))
merge(df1,df2,all)
merge(df1,df2,all=TRUE)
names(df1) <- c("alpha","lotNumbers")
merge(df1,df2,by.x = "lotNumbers", by.y = "dfindex")
View(activity)
View(avg_HpCyl)
View(blended)
View(chunk)
getwd()
msleep <-read.csv("msleep.csv")
View(msleep)
head(msleep)
sleeptime <- select(msleep, name, sleep_total)
sleeptime <- select(msleep, name, sleep_total)
install.packages("tidyverse")
sleeptime <- select(msleep, name, sleep_total)
msleep <-read.csv("msleep.csv")
head(msleep)
sleeptime <- select(msleep, name, sleep_total)
sleeptime <- select(msleep,name, sleep_total)
install.packages("dplyr")
install.packages("tidyr")
sleeptime <- select(msleep,name, sleep_total)
help select()
? select()
sleeptime <- filter(msleep, order == "Carnivora")
filter(msleep, order == "Carnivora")
msleep <-read.csv("msleep.csv")
filter(msleep, order == "Carnivora")
filter(msleep, order == 'Carnivora')
filter(msleep, order == 'Carnivora')
filter(msleep, order = 'Carnivora')
library(dplyr)
msleep <-read.csv("msleep.csv")
sleeptime <- select(msleep,name,sleep_total)
filter(msleep, order == 'Carnivora')
head(msleep)
sleeptime <- select(msleep,name,sleep_total)
filter(msleep, order == 'Carnivora')
sleeptime <- select(msleep, name, sleep_total):
filter(msleep, order == 'Carnivora')
sleeptime <- select(msleep, name, sleep_total)
sleeptime <- select(msleep, name, sleep_total)
